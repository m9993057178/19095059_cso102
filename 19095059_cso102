#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
#include<math.h>
struct stack{
int top1;
int top2;
int *array;
};
struct stack* createstack(int n)
{
    struct stack* stack = (struct stack*)malloc(sizeof(struct stack));
    //stack->capacity = capacity;
    stack->top1 = -1;
    stack->top2 = n;
    stack->array = (int*)malloc(n * sizeof(int));
    return stack;
}
void push1(struct stack* stack, int item)
{

    stack->array[++stack->top1] = item;
    //printf("%d pushed to stack\n", item);

}
void push2(struct stack* stack, int item)
{

    stack->array[--stack->top2] = item;
    //printf("%d pushed to stack\n", item);
}

// Function to remove an item from stack.  It decreases top by 1
int pop1(struct stack* stack)
{

    return stack->array[stack->top1--];
}
int pop2(struct stack* stack)
{

    return stack->array[stack->top2++];
}

int main()
{
int N,n,i;

scanf("%d",&N);
scanf("%d",&n);
int j,k,item;
struct stack* stack = createstack(N+1);
int arr[N+1];
int count=0;
for(i=0;i<n;i++)
{
    scanf("%d",&k);
    scanf("%d",&j);
    scanf("%d",&item);

    if(k==1)
    {
        if(j==1)
        {
            push1(stack,item);
            arr[count]=item;
            count++;
        }
        else
            {push2(stack,item);
            arr[count]=item;
            count++;}
    }
    else
        {
        if(j==1)
        {
            pop1(stack);
        }
        else
            {pop2(stack);}
    }

}
float sum=0;
for (i=0;i<count;i++)
{

    sum=sum+arr[i];
}
float mean;
mean=sum/count;
printf("%f ",mean);
int t;
for (i=0;i<count;i++)
{
    for(j=0;j<count;j++)
    {
       if(arr[i]>arr[j])
       {
           t=arr[j];
           arr[j]=arr[i];
           arr[i]=t;
       }
    }
}
float median;
if(count%2==0)
{
     median=(arr[(count/2)-1]+arr[(count/2)])/2;
}
if(count%2!=0)
{
     median=arr[(count/2)];
    
}
int count1;
int dublicate_arr[count];
 for(i=0;i<count;i++)
	    {
	        count1=0;
	        for(j=0;j<count;j++)
	        {
	            if(arr[i]==arr[j])
	            {
	                count1++;
	            }
	        }
	        dublicate_arr[i]=count1;
	    }
	    int max=dublicate_arr[0];
		int index_max=0;
	    for(i=0;i<count;i++){
	       if(dublicate_arr[i]>max){
	           max=dublicate_arr[i];
	           index_max=i;
	       } 
	    }
	    int mode=arr[index_max];
 float std=0;
       for(int k=0;k<count;k++)
       {
         std=std+(mean-arr[q])*(mean-arr[q]) ; 
       }
       float std1=sqrt((std)/count);
	    
	    printf("\n%f\t%f\t%d\t%f\n",mean,median,mode,std1);

for(i=stack->top1;i>=0;i--)
    {
   printf("%d\t ",stack->array[i]);

}
printf("\n");
for(i=stack->top2;i<=N;i++)
    {
   printf("%d\t ",stack->array[i]);
}
printf("\n");



}
